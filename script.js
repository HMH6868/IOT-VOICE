let recognition;
let isListening = false;
const API_URL = 'https://68b98eb76aaf059a5b57f7e9.mockapi.io/commands/API-VOICE';

// Ki·ªÉm tra tr·∫°ng th√°i m·ªõi nh·∫•t t·ª´ API
async function checkLatestStatus() {
    try {
        updateLog('üîÑ ƒêang ki·ªÉm tra tr·∫°ng th√°i t·ª´ API...');
        
        const response = await fetch(API_URL);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        
        // T√¨m entry c√≥ ID l·ªõn nh·∫•t (m·ªõi nh·∫•t)
        const latestEntry = data.reduce((latest, current) => {
            return parseInt(current.id) > parseInt(latest.id) ? current : latest;
        });
        
        const status = latestEntry.status;
        const timestamp = new Date(latestEntry.createAt * 1000);
        
        updateLightDisplay(status, latestEntry.id, timestamp);
        updateLog(`‚úÖ Tr·∫°ng th√°i hi·ªán t·∫°i: ${status} (ID: ${latestEntry.id}, Mode: ${latestEntry.mode})`);
        
    } catch (error) {
        updateLog(`‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i: ${error.message}`);
        updateLightDisplay('ERROR');
    }
}

// C·∫≠p nh·∫≠t hi·ªÉn th·ªã ƒë√®n theo tr·∫°ng th√°i
function updateLightDisplay(status, id = null, timestamp = null) {
    const lightBulb = document.getElementById('lightBulb');
    const lightStatus = document.getElementById('lightStatus');
    const lastUpdated = document.getElementById('lastUpdated');
    
    // Reset classes
    lightBulb.className = 'light-bulb';
    lightStatus.className = 'light-status';
    
    if (status === 'ON') {
        lightBulb.classList.add('on');
        lightStatus.classList.add('on');
        lightStatus.textContent = 'üîÜ ƒêANG B·∫¨T';
    } else if (status === 'OFF') {
        lightBulb.classList.add('off');
        lightStatus.classList.add('off');
        lightStatus.textContent = 'üîÖ ƒêANG T·∫ÆT';
    } else {
        lightBulb.classList.add('off');
        lightStatus.classList.add('off');
        lightStatus.textContent = '‚ùå L·ªñI';
    }
    
    if (id && timestamp) {
        lastUpdated.textContent = `C·∫≠p nh·∫≠t: ${timestamp.toLocaleString('vi-VN')}`;
    } else {
        lastUpdated.textContent = 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin th·ªùi gian';
    }
}

// Kh·ªüi t·∫°o Speech Recognition
function initSpeechRecognition() {
    if ('webkitSpeechRecognition' in window) {
        recognition = new webkitSpeechRecognition();
    } else if ('SpeechRecognition' in window) {
        recognition = new SpeechRecognition();
    } else {
        alert('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Speech Recognition');
        return false;
    }

    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'vi-VN';

    recognition.onstart = function() {
        updateStatus('ƒêang nghe... H√£y n√≥i "ON"/"B·∫¨T" ho·∫∑c "OFF"/"T·∫ÆT"');
        updateLog('üé§ B·∫Øt ƒë·∫ßu nghe gi·ªçng n√≥i');
    };

    recognition.onresult = function(event) {
        const command = event.results[0][0].transcript.toLowerCase().trim();
        updateLog(`üëÇ ƒê√£ nghe: "${command}"`);
        
        if (command.includes('on') || command.includes('b·∫≠t')) {
            sendCommand('ON');
        } else if (command.includes('off') || command.includes('t·∫Øt')) {
            sendCommand('OFF');
        } else {
            updateLog('‚ùì L·ªánh kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán. Vui l√≤ng n√≥i "ON"/"B·∫¨T" ho·∫∑c "OFF"/"T·∫ÆT"');
        }
        
        stopListening();
    };

    recognition.onerror = function(event) {
        updateLog(`‚ùå L·ªói nh·∫≠n di·ªán: ${event.error}`);
        stopListening();
    };

    recognition.onend = function() {
        stopListening();
    };

    return true;
}

// G·ª≠i l·ªánh l√™n API v·ªõi c·∫•u tr√∫c m·ªõi
async function sendCommand(status) {
    try {
        const data = {
            status: status,
            createAt: Math.floor(Date.now() / 1000),
            mode: "VOICE"
        };

        updateLog(`üì° ƒêang g·ª≠i l·ªánh: ${status} (Mode: VOICE)`);
        
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            const result = await response.json();
            updateLog(`‚úÖ G·ª≠i th√†nh c√¥ng! ID: ${result.id}, Status: ${result.status}, Mode: ${result.mode}`);
            updateStatus(`L·ªánh "${status}" ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!`);
            
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã ƒë√®n ngay l·∫≠p t·ª©c
            const timestamp = new Date(result.createAt * 1000);
            updateLightDisplay(result.status, result.id, timestamp);
            
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        updateLog(`‚ùå L·ªói g·ª≠i API: ${error.message}`);
        updateStatus('L·ªói khi g·ª≠i l·ªánh!');
    }
}

// B·∫≠t/t·∫Øt listening
function toggleListening() {
    if (!recognition && !initSpeechRecognition()) {
        return;
    }

    if (isListening) {
        stopListening();
    } else {
        startListening();
    }
}

function startListening() {
    isListening = true;
    recognition.start();
    document.getElementById('micButton').classList.add('listening');
}

function stopListening() {
    isListening = false;
    if (recognition) {
        recognition.stop();
    }
    document.getElementById('micButton').classList.remove('listening');
    updateStatus('Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu nghe');
}

// C·∫≠p nh·∫≠t UI
function updateStatus(message) {
    document.getElementById('status').textContent = message;
}

function updateLog(message) {
    const log = document.getElementById('log');
    const logItem = document.createElement('div');
    logItem.className = 'log-item';
    const timestamp = new Date().toLocaleTimeString('vi-VN');
    logItem.textContent = `[${timestamp}] ${message}`;
    log.appendChild(logItem);
    log.scrollTop = log.scrollHeight;
    
    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng log items
    if (log.children.length > 20) {
        log.removeChild(log.firstChild);
    }
}

// Kh·ªüi t·∫°o khi t·∫£i trang
window.onload = function() {
    initSpeechRecognition();
    checkLatestStatus(); // Ki·ªÉm tra tr·∫°ng th√°i ngay khi load trang
    
    // T·ª± ƒë·ªông ki·ªÉm tra tr·∫°ng th√°i m·ªói 5 gi√¢y
    setInterval(checkLatestStatus, 5000);
};